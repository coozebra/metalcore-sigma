/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface HomeGateInterface extends utils.Interface {
  functions: {
    "ETH_PREFIX()": FunctionFragment;
    "addOperator(address)": FunctionFragment;
    "canWithdraw(bytes32,address,address,uint256)": FunctionFragment;
    "checkSignatures(bytes32,uint256,uint8[],bytes32[],bytes32[])": FunctionFragment;
    "hashStore()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "migrate(address[],address)": FunctionFragment;
    "operatorAddresses()": FunctionFragment;
    "operatorCount()": FunctionFragment;
    "operatorList(uint256)": FunctionFragment;
    "operatorLocation(address)": FunctionFragment;
    "operatorLocations()": FunctionFragment;
    "operators(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requiredOperators()": FunctionFragment;
    "setRequiredOperators(uint8)": FunctionFragment;
    "transferHashStoreOwnership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokens(address[],address)": FunctionFragment;
    "updateLocation(address,string)": FunctionFragment;
    "withdraw(bytes32,address,address,uint256,uint8[],bytes32[],bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canWithdraw",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BigNumberish, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "hashStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorLocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorLocations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operators", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiredOperators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferHashStoreOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLocation",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ETH_PREFIX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorLocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferHashStoreOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LocationUpdated(address,string)": EventFragment;
    "LogWithdraw(bytes32,address,address,uint256)": EventFragment;
    "OperatorAdded(address)": EventFragment;
    "OperatorRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LocationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LocationUpdatedEvent = TypedEvent<
  [string, string],
  { operator: string; location: string }
>;

export type LocationUpdatedEventFilter = TypedEventFilter<LocationUpdatedEvent>;

export type LogWithdrawEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    transactionHash: string;
    tokenContract: string;
    recipient: string;
    value: BigNumber;
  }
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export type OperatorAddedEvent = TypedEvent<[string], { operator: string }>;

export type OperatorAddedEventFilter = TypedEventFilter<OperatorAddedEvent>;

export type OperatorRemovedEvent = TypedEvent<[string], { operator: string }>;

export type OperatorRemovedEventFilter = TypedEventFilter<OperatorRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface HomeGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HomeGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_PREFIX(overrides?: CallOverrides): Promise<[string]>;

    addOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canWithdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkSignatures(
      hash: BytesLike,
      length: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[number]>;

    hashStore(overrides?: CallOverrides): Promise<[string]>;

    isOperator(operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    migrate(
      tokenContracts: string[],
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operatorAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    operatorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    operatorLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    operatorLocations(overrides?: CallOverrides): Promise<[string[]]>;

    operators(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredOperators(overrides?: CallOverrides): Promise<[number]>;

    setRequiredOperators(
      requiredOperators_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferHashStoreOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTokens(
      tokenContracts: string[],
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLocation(
      operator: string,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_PREFIX(overrides?: CallOverrides): Promise<string>;

  addOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canWithdraw(
    transactionHash: BytesLike,
    tokenContract: string,
    recipient: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkSignatures(
    hash: BytesLike,
    length: BigNumberish,
    v: BigNumberish[],
    r: BytesLike[],
    s: BytesLike[],
    overrides?: CallOverrides
  ): Promise<number>;

  hashStore(overrides?: CallOverrides): Promise<string>;

  isOperator(operator: string, overrides?: CallOverrides): Promise<boolean>;

  migrate(
    tokenContracts: string[],
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operatorAddresses(overrides?: CallOverrides): Promise<string[]>;

  operatorCount(overrides?: CallOverrides): Promise<BigNumber>;

  operatorList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  operatorLocation(arg0: string, overrides?: CallOverrides): Promise<string>;

  operatorLocations(overrides?: CallOverrides): Promise<string[]>;

  operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredOperators(overrides?: CallOverrides): Promise<number>;

  setRequiredOperators(
    requiredOperators_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferHashStoreOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTokens(
    tokenContracts: string[],
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLocation(
    operator: string,
    location: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    transactionHash: BytesLike,
    tokenContract: string,
    recipient: string,
    value: BigNumberish,
    v: BigNumberish[],
    r: BytesLike[],
    s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_PREFIX(overrides?: CallOverrides): Promise<string>;

    addOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    canWithdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkSignatures(
      hash: BytesLike,
      length: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<number>;

    hashStore(overrides?: CallOverrides): Promise<string>;

    isOperator(operator: string, overrides?: CallOverrides): Promise<boolean>;

    migrate(
      tokenContracts: string[],
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorAddresses(overrides?: CallOverrides): Promise<string[]>;

    operatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    operatorLocation(arg0: string, overrides?: CallOverrides): Promise<string>;

    operatorLocations(overrides?: CallOverrides): Promise<string[]>;

    operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requiredOperators(overrides?: CallOverrides): Promise<number>;

    setRequiredOperators(
      requiredOperators_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferHashStoreOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokens(
      tokenContracts: string[],
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLocation(
      operator: string,
      location: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LocationUpdated(address,string)"(
      operator?: null,
      location?: null
    ): LocationUpdatedEventFilter;
    LocationUpdated(
      operator?: null,
      location?: null
    ): LocationUpdatedEventFilter;

    "LogWithdraw(bytes32,address,address,uint256)"(
      transactionHash?: null,
      tokenContract?: null,
      recipient?: null,
      value?: null
    ): LogWithdrawEventFilter;
    LogWithdraw(
      transactionHash?: null,
      tokenContract?: null,
      recipient?: null,
      value?: null
    ): LogWithdrawEventFilter;

    "OperatorAdded(address)"(operator?: null): OperatorAddedEventFilter;
    OperatorAdded(operator?: null): OperatorAddedEventFilter;

    "OperatorRemoved(address)"(operator?: null): OperatorRemovedEventFilter;
    OperatorRemoved(operator?: null): OperatorRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ETH_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    addOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canWithdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSignatures(
      hash: BytesLike,
      length: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStore(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      tokenContracts: string[],
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operatorAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    operatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorLocations(overrides?: CallOverrides): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredOperators(overrides?: CallOverrides): Promise<BigNumber>;

    setRequiredOperators(
      requiredOperators_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferHashStoreOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTokens(
      tokenContracts: string[],
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLocation(
      operator: string,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_PREFIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canWithdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSignatures(
      hash: BytesLike,
      length: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      tokenContracts: string[],
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operatorAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorLocations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRequiredOperators(
      requiredOperators_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferHashStoreOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTokens(
      tokenContracts: string[],
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLocation(
      operator: string,
      location: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      transactionHash: BytesLike,
      tokenContract: string,
      recipient: string,
      value: BigNumberish,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
